/**
 * @file This file contains all the core TypeScript types, enums, and interfaces
 * for the AI Question Generation application. Centralizing these definitions
 * ensures consistency and type safety across the entire codebase.
 */

// =================================
// --- Enums ---
// =================================

/**
 * Defines the available types of questions the AI can generate.
 * Corresponds to Step 1 in the wizard.
 */
export enum QuestionType {
  SingleChoice = 'radio',
  MultipleChoice = 'checkbox',
  TrueFalse = 'true_false',
  Ranking = 'ranking',
  Rating = 'rating',
  FillInTheBlank = 'fill_blank',
  ShortText = 'short_text',
  Matching = 'matching',
  Essay = 'essay',
}

/**
 * Defines the available sources for generating questions.
 * Corresponds to Step 2 in the wizard.
 */
export enum SourceType {
  Text = 'text',
  Image = 'image',
  PDF = 'pdf',
}

/**
 * Defines the possible statuses for an AI generation session.
 */
export enum GenerationStatus {
  Pending = 'pending',
  Processing = 'processing',
  Completed = 'completed',
  Failed = 'failed',
}

/**
 * Defines the difficulty levels for generated questions.
 */
export enum Difficulty {
  Easy = 'Easy',
  Medium = 'Medium',
  Hard = 'Hard',
}

// =================================
// --- Core Data Structures ---
// =================================

/**
 * Represents a single option within a generated question.
 */
export interface QuestionOption {
  id: string; // Unique ID for the option
  text: string;
  isCorrect: boolean;
  match?: string; // For matching questions
}

/**
 * Represents a fully formed question generated by the AI.
 * This is the primary output format to be reviewed by the user.
 */
export interface GeneratedQuestion {
  id: string; // UUID for the question
  type: QuestionType;
  questionText: string;
  options: QuestionOption[];
  points: number;
  difficulty: Difficulty;
  qualityScore: number; // A score from 0-100 indicating AI's confidence
  explanation?: string; // Optional explanation for the correct answer
}

// =================================
// --- Wizard Step Interfaces ---
// =================================

/**
 * Defines the user's selection for a specific question type and its quantity.
 * Used in Step 1: Question Types.
 */
export interface QuestionTypeSelection {
  type: QuestionType;
  quantity: number;
}

/**
 * Defines the guidelines and constraints for the AI generation process.
 * Used in Step 3: Guidelines.
 */
export interface AIEvaluationGuidelines {
  targetAudience: 'Beginner' | 'Intermediate' | 'Expert';
  language: string; // e.g., 'en-US'
  tone: 'Formal' | 'Informal' | 'Humorous' | 'Neutral';
}

// =================================
// --- AI Session & Status Interfaces ---
// =================================

/**
 * Represents the complete request payload sent to the backend to start a generation session.
 */
export interface GenerationRequest {
  questionSelections: QuestionTypeSelection[];
  sourceType: SourceType;
  sourceText?: string;
  sourceFileId?: string;
  guidelines: AIEvaluationGuidelines;
}

/**
 * Represents the real-time status of an ongoing generation process.
 * Used for updating the UI in Step 4: Generation.
 */
export interface GenerationProgress {
  sessionId: string;
  status: GenerationStatus;
  currentStage: string;
  progressPercentage: number; // A value from 0 to 100
  etaSeconds: number;
}

/**
 * Represents a full generation session, including request, status, and results.
 * This would typically be the data model stored in the database.
 */
export interface GenerationSession extends GenerationRequest {
  id: string; // Session UUID
  userId: string;
  status: GenerationStatus;
  generatedQuestions: GeneratedQuestion[];
  costInCredits: number;
  createdAt: string; // ISO 8601 date string
  completedAt?: string; // ISO 8601 date string
}

// =================================
// --- Balance & Usage Interfaces (API Responses) ---
// =================================

/**
 * Represents a specific usage meter (e.g., for Text, Image, or PDF generation).
 * Matches the backend `UsageMeter` type.
 */
export interface UsageMeter {
  type: 'text' | 'image' | 'pdf';
  used: number;
  limit: number;
}

/**
 * Represents the response from the `/api/ai-generation/balance` endpoint.
 */
export interface BalanceInfoResponse {
  currentCredits: number;
  totalCreditsInPeriod: number;
  periodStartDate: string; // ISO 8601 date string
  periodEndDate: string; // ISO 8601 date string
  usageMeters: UsageMeter[];
}

/**
 * Represents a single item in the generation history.
 * Matches the backend `GenerationHistoryItem` type.
 */
export interface GenerationHistoryItem {
  id: string;
  date: string; // ISO 8601 date string
  status: GenerationStatus;
  sourceType: 'text' | 'image' | 'pdf';
  questionCount: number;
  cost: number;
  outcome: string;
}

/**
 * Represents pagination information from the API.
 * Matches the backend `PaginationInfo` type.
 */
export interface PaginationInfo {
  currentPage: number;
  totalPages: number;
  pageSize: number;
  totalItems: number;
}

/**
 * Represents the full response from the `/api/ai-generation/balance/history` endpoint.
 */
export interface HistoryResponse {
  history: GenerationHistoryItem[];
  pagination: PaginationInfo;
}
